---- 新建一个 git 仓库 ----

git init [<repoName>]


---- 克隆一个 git 仓库 ----


git clone <URL> [<NewName>]

从 <URL> 地址克隆一个仓库，可以使用 <NewName> 来进行仓库的重命名


---- 设置用户信息（用户名以及用户邮箱） ----

git config --global user.name <someName>
git cinfig --global user.email <someUser@someplace>

参数
	--global 参数设置为当前用户默认
	--local  当前设置为当前git库默认
	--system 当前设置为当前系统默认


---- 设置默认编辑器 ----

git config --global core.editor <someExecusiveBinary>

参数同上


---- 罗列配置列表 ----

git config --list

该命令会罗列所有层级中所有的 config，但只会使用列表中最后一组作为当前起效的配置


---- 获取某项配置内容 ----

git config <key>


---- 帮助文件 ----

git help <verb>
git <verb> --help
man git-<verb>


---- 文件的四种状态 ----

Untracked--未跟踪（未纳入 Git 追踪的文件）
Unmodified--未修改（已经存为快照的文件）
Modified--已修改（当前修改但未暂存的文件）
Staged--已暂存（已暂存，有待存快照的文件）


---- 检查文件状态 ----

git status

将返回当前的分支，当前未跟踪/未暂存/未快照的文件

git status -s
git status --short

status 的缩略模式

e.g.

$ git status -s

 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt

M 代表 Modified，M 出现在右侧表示文件已修改，未暂存（Modified, Unstaged）
			  M 出现在左侧表示文件已修改，已暂存(Modified, Staged)
			  MM 表示文件已暂存，但在暂存之后接着又进行了修改（Staged, then Modified）
A代表 Added，表示新添加至暂存区的文件
??代表未被 Git 追踪的文件


---- 将文件(s)添加至 Git 追踪/将修改提交至暂存区 ----

git add <fileName1> <fileName2>

只有 add 之后，修改才会被 commit 命令提交至快照中


---- Git 默认不追踪规则 ----

.gitignore 文件

规则

 # 开头 注释
 / 开头 仅匹配当前目录
 / 结尾 选中整个目录
 ! 开头 取反

 * 匹配任意多个字符
 [abc] 匹配列表中的单个字符
 [0-9] 匹配自动列表中的单个字符
 **	匹配任意深度的目录

 e.g.

 # 不追踪 .a 文件
 *.a

 # 但追踪 lib.a 文件
 !lib.a

 # 不追踪当前目录下的 TODO 文件
 /TODO

 # 不追踪整个 build 文件夹
 build/

 # 不追踪 doc 一级子目录下的 .txt 文件
 doc/*.txt

 # 不追踪 doc 所有子目录层级下的 .pdf 文件
 doc/**/*.pdf


---- 详细检查文件变动的差异 ----

git diff

返回当前正在修改的文件和已暂存的文件之间的差别

git diff --cached
git diff --staged

返回当前已暂存的文件与已快照之间的文件之间的差别

git diff HEAD

返回当前工作目录下的文件与快照之间的差别

git diff [options] -- <fileName>

只对比指定文件的差异

---- 将已暂存/已修改的文件变为快照 ----

git commit

将已暂存的文件提交为快照，在之后需要提交一个 message 作为备注
备注中所有以 # 开头的都将被忽略

git commit -m <someString>

将已暂存的文件提交为快照，并将 <someString> 指定为备注

git commit -a

自动检测本次所有修改过的文件，并创建快照


---- 从暂存区中移除文件 ----

git rm <fileName>

这将从暂存区移除文件，并移除 Git 对该文件的追踪，同时从修改区移除文件

git rm -f <fileName>
git rm --force

若文件已修改且已暂存，则必须使用 -f 来强制删除文件
Git 这样的设计是为了保护未经快照就被删除的文件

git rm --cached <fileName>

仅从暂存中删除文件，但保留修改区的文件

e.g.

git rm log/\*.log

注意反斜杠 \ 的使用，这会让 * 传入 git 中，使用 git 自己的通配方案，而不使用 shell 的通配模式

---- 修改文件名 ----

git mv <from_FileName> <to_FileName>

移动和改名的方式的是一样的


---- 查看查看提交历史 ----

git log

以提交时间逆序排列显示历史提交信息

git log -p
git log --patch

	-p （按补丁格式）显示详细的每次提交的修改内容

git log -<int>

	-<int> 仅显示最近 n 次的提交历史

git log --stat

	--stat 简要显示提交的简介，并生成总结

git log --pretty=oneline
git log --pretty=short
git log --pretty=full
git log --pretty=fuller
git log --pretty=format:"<someSynax>"
	--pretty=oneline 仅显示 SHA 值和 commit message
	--pretty=short/full/fuller 逐级显示 Author 和 Commit 的内容
	--pretty=format:"<someSynax>"用指定的格式显示 log

%H  提交对象（commit）的完整哈希字串

%h  提交对象的简短哈希字串

%T  树对象（tree）的完整哈希字串

%t  树对象的简短哈希字串

%P  父对象（parent）的完整哈希字串

%p  父对象的简短哈希字串

%an 作者（author）的名字

%ae 作者的电子邮件地址

%ad 作者修订日期（可以用 --date= 选项定制格式）

%ar 作者修订日期，按多久以前的方式显示（ r 代表 relative）

%cn 提交者(committer)的名字

%ce 提交者的电子邮件地址

%cd 提交日期

%cr 提交日期，按多久以前的方式显示

%s 提交说明


git log --graph 图形形式显示 log

git log --since --until 以时间线方式限定历史

git log --grep 显示做出了特定修改的历史

git log -S<someString> 显示添加或删除了部分字符串的 commit（没有空格）

git log -- <filePath> 只罗列与 <filePath> 相关文件的 log（放置在最后，有空格）

git log --abbrev-commit 只显示SHA-1值的前几位


---- 撤销操作 ----

git commit --amend 修改上次的提交（修改提交信息，或者添加未暂存的文件等等）

git commit --amend --reset-author 修改上次提交的信息，重置作者

git reset HEAD <fileName> 将HEAD中对应的文件复写到暂存区（将暂存区回复到未修改的状态）（无视工作区的文件）

git reset --hard HEAD 【危险命令】将工作区和暂存区的所有文件完全重置至上个 commit

git reset --hard HEAD^ 退回至上上个 commit

git reset --hard HEAD^^ 退回至上上上个 commit（以此类推）

git reset --hard HEAD~0 等价于 git reset --hard HEAD

git reset --hard HEAD~2 等价于 git reset --hard HEAD^^

git reflog 显示每一次 git 操作对应的 SHA，可以用于撤销撤销操作

git checkout -- <file> 从暂存区覆盖文件至工作区


---- 删除文件 ----

rm <fileName>

调用系统的删除命令，删除了工作区的文件，git status 会提示有 unstaged 的修改存在

git rm <fileName>

git会删除工作区的文件并 stage 至暂存区


---- 远程库的添加 ----

ssh-keygen -t rsa -C "blahblahblah"

生成 ssh-key
	-t 使用的加密方式
	-C 添加的备注

git remote add <shortName> <URL>

关联远程库，<shortName> 指定本机的短名称，<URL> 指定远程库所在的位置
github 的 URL 一般是 git@github.com:<userName>/<reposityName>

git remote push -u <remoteShortName>|<remoteURL> <localBranchName>

向远程库推送文件
	-u
	--set-upstream 对于同一个分支，第一次推送时使用即可
	<remoteShortName>/<remoteURL> 远程库短名称/地址
	<localBranchName> 将要被推送的本地分支名称

<URL> 若不指定通讯协议，默认使用 git:// 协议传输，也可以指定为 https:// 协议传输

git clone <remoteURL> [<newRepoName>]

从远程库克隆库

git fetch <remoteShortName>

从远程库获取所有分支的内容，但并不与本地库中对应的分支进行合并


---- 远程库的推送 ----

git remote -v 查看详细的远程库信息

e.g.
$git remote -v
origin git@github.com:someOne/someReposity (fetch)
origin git@github.com:someOne/someReposity (push)

第一列显示了本地短名称
第二列显示了远程库的地址
第三列显示了该地址对应的是 fetch 需要的地址还是 push 需要的地址

git remote show <reomoteShortName>

显示短名称为 <remoteShortName> 的远程库的信息

git remote rename <oldRemoteShortName> <newRemoteShortName>

对远程库的简称进行重命名

git remote rm <remoteShortName>

删除已拉取到本地库中的远程库

---- 创建/合并/删除分支 ----

git checkout -b <branchName>

创建一个名为 <branchName> 的分支，并移动到该分支上

git branch <branchName>

创建一个名为 <branchName> 的分支，但不移动到该分支上

git branch

罗列当前所有的分支

git merge <otherBranch>

将名为 <otherBranch> 的分支的数据合并到当前所处的分支中
这个操作并不会删除 <otherBranch> 分支

git branch -d <otherBranch>

删除名为 <otherBranch> 的分支
注意，不可以删除当前所处的分支

git branch -D <otherBranch>

强制删除名为 <otherBranch> 的分支，无视其是否被合并


---- 合并但保留合并记录的方式 ----

git merge --no-ff -m "blahblahblah" <otherBranch>

普通模式下，如果没有合并冲突（merge conflict），则启用 Fast Forward 模式，合并后不保留原始分支信息
可以强制使用 --no-ff 禁用本次 merge 的 Fast Forward，此时本次合并会当成一次 commit


---- 临时存储工作区文件 ----

git stash 创建临时存储

git stash list 检查临时存储列表

git stash apply <stashID> 将名为 <stashID> 的 stash 提取至工作区（不删除 stash）

git stash drop <stashID> 删除名为 <stashID> 的 stash

git stash pop <stashID> 将名为 <stashID> 的 stash 提取至工作区，并删除 stash


---- 链接远程库和本地库 ----

在使用 git clone 的时候会将整个远程库都拖下来
所有的远程分支都被拷贝在短名称定义的分支里
此时使用

git branch <localName> <<remoteShortName>/<remoteBranchName>>

或

git checkout -b <localName> <<remoteShortName>/<remoteBranchName>>

创建本地的分支，并从本地的 origin 库中拷贝指定分支至本地库中

此时会自动创建关联，执行 pull 和 push 命令时会自动指定到关联的远程库分支

【所以在本地的 origin 分支是本地分支和远程分支的中转站】


当创建了分支而没有关联远程库的时候，使用

git branch --set-upstream <remoteShortName>/<remoteBranchName> <localBranch> 来执行关联


---- 推送分支至远程库 ----

git push <remoteShortName> <localBranchName>

将本地名为 <localBranchName> 的分支推送到远程库对应名字的分支中
若远程库中没有对应名字的分支，则在远程库中创建

git pull

从远程库获取当前所在分支的信息


---- 标签的创建 ----

git tag <tagName> [<commitID>]（<tagName> 不加引号）

通过上述命令为 <commitID> 对应的快照贴一个名为 <tagName> 的轻量（lightweight）标签

git tag

显示当前分支下的所有标签

git tag -l "<someTagName>"

只显示指定的Tag，<someTagName> 可以使用正则匹配

git tag -a <tagName> -m <tagMessage> [<commitID>]（<tagName> 不加引号）

	-a,--annotate

创建一个附注标签（annotated）并附带保存一个 <tagMessage>

git tag -s <tagName> -m <tagMessage> [<commitID>]

	-s --signed

创建一个用 GnuPG (GPG) 产生的秘钥签名的 tag

轻量标签只是一个指向某个commit的指针
附注标签则是一个完整的Object


---- 标签的删除 ----

git show <tagName>

显示名为 <tagName> 的标签的详细内容

git tag -d <tagName>

删除指定的Tag

默认情况下，git push 不会推送标签物体，需要使用

git push <remoteShortName> <tagName>

来推送指定的标签

或者，使用

git push --tags

将本分支下所有的标签都推送至远程库

若要删除已推送至远端的的标签，需要先删除本地的标签

git tag -d <tagName>

接着再使用

git push <remoteShortName> :refs/tags/<tagName>

将这个修改推送至远端库

checkout -b <newBranchName> <tagName>

不能直接checkout一个标签，需要为某个标签创建一个新的branch来保存对它的修改


---- 配置 Git ----

git config --<activeSpace> --<configKey> --<configValue>

配置 Git 的通用语句

	--<activeSpace> 起效作用范围 local（当前库）、global（当前使用者）、system（当前系统）
	--<configKey> 一般来说会有两层（也就是 stringA.stringB），来区分这个Key是哪个分类下的什么键

Git 别名

git config --<activeSpace> alias.<shortCommandName> <originalCommand>

使用这个命令配置Git命令的简称

若<originalCommand>以 ! 开头，则会执行系统命令

e.g.

git config --local alias.co checkout
git config --local alias.unstage "reset HEAD --"
git cinfig --local alias.last "log -1 HEAD"


---- Git 存储原理 ----

Git 使用文件快照（snapshot）的方式存储不同版本的文件

文件快照包含

(1) blob 对象（blob object）：每个 blob 对象存储当前快照下的一个实际文件数据，并附带一个校验和
(2) tree 对象（tree object）:每个 tree 对象存储了当前快照下的文件目录结构以及对应的 blob 索引号（即 blob 校验和），并附带一个校验和
(3) commit 对象（commit object）：<1>每个 commit 对象存储了当前快照下的 tree 索引号（即 tree 校验和）、提交信息（author、email），并附带一个校验和
								 <2>若这个 commit 不是初始 commit，则除了上述内容之外，还包含指向上一个 commit 索引号（即 commit 校验和）的指针（parent）

branch就是一个指向某个特定 commit 对象的指针

而git branch <newBranchName> 就是创建了一个新的指向当前 commit 对象的指针

HEAD 就是一个特殊的指针，它总是指向当前正在操作的分支指针

git log --decorate 可以查看各个branch当前指向的commit对象

git checkout <branchName> 的作用就是将HEAD指针指向某一个branch指针，同时将快照文件复写到工作目录（如果原来的工作目录中的文件都被暂存）

